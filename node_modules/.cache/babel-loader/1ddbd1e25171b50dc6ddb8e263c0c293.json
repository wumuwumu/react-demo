{"ast":null,"code":"var _jsxFileName = \"/Users/wumu/web/html/project/react-demo/src/container/leaflet/picture.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport L from \"leaflet\";\nimport styles from \"./style/simple.module.css\";\nimport \"leaflet/dist/leaflet.css\";\nexport default class picture extends Component {\n  constructor(prop) {\n    super(prop);\n    this.map = null;\n  }\n\n  componentDidMount() {\n    let mapOptions = {\n      attributionControl: false\n    };\n    this.map = L.map('map', {\n      minZoom: 1,\n      maxZoom: 6,\n      center: [0, 0],\n      zoom: 5,\n      crs: L.CRS.Simple\n    }); // try event\n\n    this.map.on('click', function (e) {\n      console.log(e);\n      alert('纬度：' + e.latlng.lat + '\\n经度：' + e.latlng.lng);\n    }); // dimensions of the image\n\n    var w = 600,\n        h = 360,\n        url = 'https://images2.alphacoders.com/727/72732.png'; // calculate the edges of the image, in coordinate space\n\n    var southWest = this.map.unproject([0, h], this.map.getMaxZoom() - 1);\n    var northEast = this.map.unproject([w, 0], this.map.getMaxZoom() - 1); // var bounds = [[0,-180], [90,180]]\n\n    var bounds = new L.LatLngBounds(southWest, northEast);\n    console.log(bounds); // add the image overlay,\n    // so that it covers the entire map\n\n    L.imageOverlay(url, bounds).addTo(this.map); // tell leaflet that the map is exactly as big as the image\n\n    this.map.setMaxBounds(bounds);\n    var myIcon = L.divIcon({\n      html: \"\\n    <div style=\\\"background:red;\\\">\\u5927\\u5BB6\\u597D</div>\\n  \"\n    }); // you can set .my-div-icon styles in CSS\n\n    L.marker([-2.8, 7], {\n      icon: myIcon\n    }).addTo(this.map); // L.marker([-2.7,7]).addTo(this.map);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"map\",\n      className: styles.map,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/wumu/web/html/project/react-demo/src/container/leaflet/picture.js"],"names":["React","Component","PropTypes","L","styles","picture","constructor","prop","map","componentDidMount","mapOptions","attributionControl","minZoom","maxZoom","center","zoom","crs","CRS","Simple","on","e","console","log","alert","latlng","lat","lng","w","h","url","southWest","unproject","getMaxZoom","northEast","bounds","LatLngBounds","imageOverlay","addTo","setMaxBounds","myIcon","divIcon","html","marker","icon","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAO,0BAAP;AAEA,eAAe,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAC7CK,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,UAAMA,IAAN;AACA,SAAKC,GAAL,GAAW,IAAX;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,UAAU,GAAG;AACfC,MAAAA,kBAAkB,EAAE;AADL,KAAjB;AAGA,SAAKH,GAAL,GAAWL,CAAC,CAACK,GAAF,CAAM,KAAN,EAAa;AACtBI,MAAAA,OAAO,EAAE,CADa;AAEtBC,MAAAA,OAAO,EAAE,CAFa;AAGtBC,MAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAHc;AAItBC,MAAAA,IAAI,EAAE,CAJgB;AAKtBC,MAAAA,GAAG,EAAEb,CAAC,CAACc,GAAF,CAAMC;AALW,KAAb,CAAX,CAJkB,CAYpB;;AACA,SAAKV,GAAL,CAASW,EAAT,CAAY,OAAZ,EAAqB,UAASC,CAAT,EAAY;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAG,MAAAA,KAAK,CAAC,QAAQH,CAAC,CAACI,MAAF,CAASC,GAAjB,GAAuB,OAAvB,GAAiCL,CAAC,CAACI,MAAF,CAASE,GAA3C,CAAL;AACD,KAHD,EAboB,CAiBpB;;AACA,QAAIC,CAAC,GAAG,GAAR;AAAA,QACIC,CAAC,GAAG,GADR;AAAA,QAEIC,GAAG,GAAG,+CAFV,CAlBoB,CAqBpB;;AACA,QAAIC,SAAS,GAAG,KAAKtB,GAAL,CAASuB,SAAT,CAAmB,CAAC,CAAD,EAAIH,CAAJ,CAAnB,EAA2B,KAAKpB,GAAL,CAASwB,UAAT,KAAsB,CAAjD,CAAhB;AACA,QAAIC,SAAS,GAAG,KAAKzB,GAAL,CAASuB,SAAT,CAAmB,CAACJ,CAAD,EAAI,CAAJ,CAAnB,EAA2B,KAAKnB,GAAL,CAASwB,UAAT,KAAsB,CAAjD,CAAhB,CAvBoB,CAwBpB;;AAEA,QAAIE,MAAM,GAAG,IAAI/B,CAAC,CAACgC,YAAN,CAAmBL,SAAnB,EAA8BG,SAA9B,CAAb;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAYY,MAAZ,EA3BoB,CA4BpB;AACA;;AACA/B,IAAAA,CAAC,CAACiC,YAAF,CAAeP,GAAf,EAAoBK,MAApB,EAA4BG,KAA5B,CAAkC,KAAK7B,GAAvC,EA9BoB,CA+BpB;;AACA,SAAKA,GAAL,CAAS8B,YAAT,CAAsBJ,MAAtB;AAEA,QAAIK,MAAM,GAAGpC,CAAC,CAACqC,OAAF,CAAU;AAACC,MAAAA,IAAI;AAAL,KAAV,CAAb,CAlCoB,CAqCtB;;AACEtC,IAAAA,CAAC,CAACuC,MAAF,CAAS,CAAC,CAAC,GAAF,EAAM,CAAN,CAAT,EAAmB;AAACC,MAAAA,IAAI,EAAEJ;AAAP,KAAnB,EAAmCF,KAAnC,CAAyC,KAAK7B,GAA9C,EAtCoB,CAwCpB;AAEC;;AAEDoC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAK,MAAA,EAAE,EAAC,KAAR;AAAc,MAAA,SAAS,EAAExC,MAAM,CAACI,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AApD4C","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport L from \"leaflet\";\nimport styles from \"./style/simple.module.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nexport default class picture extends Component {\n  constructor(prop) {\n    super(prop);\n    this.map = null;\n  }\n\n  componentDidMount() {\n    let mapOptions = {\n      attributionControl: false\n    };\n    this.map = L.map('map', {\n      minZoom: 1,\n      maxZoom: 6,\n      center: [0, 0],\n      zoom: 5,\n      crs: L.CRS.Simple\n  });\n\n  // try event\n  this.map.on('click', function(e) {\n    console.log(e);\n    alert('纬度：' + e.latlng.lat + '\\n经度：' + e.latlng.lng);\n  });\n  // dimensions of the image\n  var w = 600,\n      h = 360,\n      url = 'https://images2.alphacoders.com/727/72732.png';\n  // calculate the edges of the image, in coordinate space\n  var southWest = this.map.unproject([0, h], this.map.getMaxZoom()-1);\n  var northEast = this.map.unproject([w, 0], this.map.getMaxZoom()-1);\n  // var bounds = [[0,-180], [90,180]]\n\n  var bounds = new L.LatLngBounds(southWest, northEast);\n  console.log(bounds);\n  // add the image overlay,\n  // so that it covers the entire map\n  L.imageOverlay(url, bounds).addTo(this.map);\n  // tell leaflet that the map is exactly as big as the image\n  this.map.setMaxBounds(bounds);\n\n  var myIcon = L.divIcon({html:`\n    <div style=\"background:red;\">大家好</div>\n  `});\n// you can set .my-div-icon styles in CSS\n  L.marker([-2.8,7], {icon: myIcon}).addTo(this.map);\n\n  // L.marker([-2.7,7]).addTo(this.map);\n\n  }\n\n  render() {\n    return <div id=\"map\" className={styles.map} />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}