{"version":3,"sources":["container/leaflet/style/simple.module.css","logo.svg","container/leaflet/simple.js","container/leaflet/picture.js","container/leaflet/index.js","container/common/Page404.js","router/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","__webpack_require__","p","simple","prop","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","L","attributionControl","setView","tileLayer","subdomains","attribution","addTo","react_default","a","createElement","id","className","styles","Component","picture","minZoom","maxZoom","center","zoom","crs","CRS","Simple","southWest","unproject","getMaxZoom","northEast","bounds","LatLngBounds","console","log","imageOverlay","setMaxBounds","index","_Component","apply","arguments","inherits","createClass","key","value","match","props","react_router","path","concat","component","Page404","routers","react_router_dom","leaflet","App","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c01edd34.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"simple_map__l67qe\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport L from \"leaflet\";\nimport styles from \"./style/simple.module.css\";\nimport 'leaflet/dist/leaflet.css';\n\nexport default class simple extends Component {\n \n\n  constructor(prop) {\n    super(prop);\n    this.map = null;\n  }\n\n  componentDidMount() {\n    let mapOptions = {\n      attributionControl: false\n    };\n    this.map = L.map(\"map\", mapOptions).setView(\n      [37.92388861359015, 115.22048950195312],\n      16\n    );\n    // L.tileLayer(\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\", {\n    //   attribution:\n    //     '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n    //   maxZoom: 18\n    // }).addTo(this.map);\n    L.tileLayer('http://webrd0{s}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8&x={x}&y={y}&z={z}', {\n      subdomains: \"1234\",\n      attribution: '高德地图'\n    }).addTo(this.map);\n  }\n\n  render() {\n    return <div id=\"map\" className={styles.map} ></div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport L from \"leaflet\";\nimport styles from \"./style/simple.module.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nexport default class picture extends Component {\n  constructor(prop) {\n    super(prop);\n    this.map = null;\n  }\n\n  componentDidMount() {\n    let mapOptions = {\n      attributionControl: false\n    };\n    this.map = L.map('map', {\n      minZoom: 1,\n      maxZoom: 6,\n      center: [0, 0],\n      zoom: 5,\n      crs: L.CRS.Simple\n  });\n  // dimensions of the image\n  var w = 600,\n      h = 360,\n      url = 'https://images2.alphacoders.com/727/72732.png';\n  // calculate the edges of the image, in coordinate space\n  var southWest = this.map.unproject([0, h], this.map.getMaxZoom()-1);\n  var northEast = this.map.unproject([w, 0], this.map.getMaxZoom()-1);\n  // var bounds = [[0,-180], [90,180]]\n\n  var bounds = new L.LatLngBounds(southWest, northEast);\n  console.log(bounds);\n  // add the image overlay,\n  // so that it covers the entire map\n  L.imageOverlay(url, bounds).addTo(this.map);\n  // tell leaflet that the map is exactly as big as the image\n  this.map.setMaxBounds(bounds);\n  }\n\n  render() {\n    return <div id=\"map\" className={styles.map} />;\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { BrowserRouter as Router,Switch, Route, Link } from \"react-router-dom\";\nimport simple from './simple'\nimport picture from './picture'\nexport class index extends Component {\n  static propTypes = {};\n\n  render() {\n    let {match} = this.props;\n    return (\n      <div >\n        <div>dajiahao</div>\n        <Switch>\n        <Route path={`${match.path}/simple`}  component={simple} />\n        <Route path={`${match.path}/picture`}  component={picture} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default index;\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class Page404 extends Component {\n  static propTypes = {\n\n  }\n\n  render() {\n    return (\n      <div>\n        404\n      </div>\n    )\n  }\n}\n\nexport default Page404\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\n\nimport leaflet from \"../container/leaflet\";\nimport Page404 from \"../container/common/Page404\";\n\nlet routers = (\n  <Router>\n    <Switch>\n      <Route path=\"/leaflet\" component={leaflet} />\n      <Route component={Page404} />\n    </Switch>\n  </Router>\n);\n\nexport default routers;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport routers from './router'\nfunction App() {\n  return (\n    <div className=\"App\">\n      {routers}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}